const API_URL = "http://localhost:8080/api/mouvements";

// Fonction pour r√©cup√©rer les en-t√™tes avec le token JWT
function getAuthHeaders() {
  const token = localStorage.getItem('token');
  return token
    ? { "Content-Type": "application/json", "Authorization": `Bearer ${token}` }
    : { "Content-Type": "application/json" };
}

// üîÑ R√©cup√©rer tous les mouvements
export async function getAllMovements() {
  const response = await fetch(API_URL, {
    headers: getAuthHeaders()
  });
  if (!response.ok) throw new Error("Erreur lors de la r√©cup√©ration des mouvements.");
  return await response.json();
}

// üîç R√©cup√©rer un mouvement par ID
export async function getMovementById(id) {
  const response = await fetch(`${API_URL}/${id}`, {
    headers: getAuthHeaders()
  });
  if (!response.ok) throw new Error(`Mouvement avec l'ID ${id} non trouv√©.`);
  return await response.json();
}

// ‚ûï Cr√©er un nouveau mouvement
export async function createMovement(movement) {
  const response = await fetch(API_URL, {
    method: "POST",
    headers: getAuthHeaders(),
    body: JSON.stringify(movement),
  });
  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erreur lors de la cr√©ation du mouvement: ${errorText}`);
  }
  return await response.json();
}
